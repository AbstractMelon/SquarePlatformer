name: Build, Release, and Publish

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check if commit message matches pattern
        id: commit_message_check
        shell: bash
        run: |
          # Get the latest commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)

          # Regular expression for matching the commit message
          if ! echo "$COMMIT_MSG" | grep -Pq '^update:.+ - v[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Commit message does not match the required pattern: $COMMIT_MSG"
            exit 1  # Exit with an error code to stop the workflow if the message doesn't match
          fi

          echo "Commit message matches pattern: $COMMIT_MSG"

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0"

      - name: Install dependencies
        run: dotnet restore

      - name: Publish for Windows
        run: dotnet publish -c Release -r win-x64 --self-contained -p:PublishSingleFile=true -o ./publish/win

      - name: Publish for Linux
        run: dotnet publish -c Release -r linux-x64 --self-contained -p:PublishSingleFile=true -o ./publish/linux

      - name: Publish for macOS
        run: dotnet publish -c Release -r osx-x64 --self-contained -p:PublishSingleFile=true -o ./publish/osx

      - name: Fetch remote tags
        run: |
          # Fetch all tags from the remote repository
          git fetch --tags

      - name: Create and Push Git Tag
        id: create_tag
        run: |
          # Extract version from commit message
          VERSION=$(git log -1 --format=%s | grep -oP 'v\K[0-9]+\.[0-9]+\.[0-9]+')

          if [ -z "$VERSION" ]; then
            echo "Version not found in commit message."
            exit 1
          fi

          # Create and push the tag
          git tag "v$VERSION"
          git push origin "v$VERSION"

      - name: Set Version as Output
        id: set_version
        run: echo "VERSION=$(git log -1 --format=%s | grep -oP 'v\K[0-9]+\.[0-9]+\.[0-9]+')" >> $GITHUB_ENV

  release:
    runs-on: ubuntu-latest
    needs: build # Ensure this job waits for the 'build' job to complete

    steps:
      - name: Fetch remote tags again (ensure latest tag is available)
        run: |
          git fetch --tags

      - name: Create GitHub Release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }} # Use the tag created in the 'build' job
          files: |
            ./publish/win/*
            ./publish/linux/*
            ./publish/osx/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Changelog
        id: changelog
        run: |
          VERSION=${{ env.VERSION }}
          echo "Changelog for version $VERSION" > changelog.md
          echo "## Changes:" >> changelog.md
          git log --oneline --no-merges --since="1 week ago" >> changelog.md
          echo "Changelog for version $VERSION" >> changelog.md
          cat changelog.md

      - name: Upload Changelog as Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: changelog.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Notify on failure
  notify:
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Notify failure (optional)
        run: echo "Build or release process failed, please check the logs!"
